import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, R as validate_store, T as component_subscribe, e as element, t as text, a as space, q as create_component, c as claim_element, b as children, f as claim_text, g as detach_dev, h as claim_space, r as claim_component, j as attr_dev, l as add_location, U as listen_dev, X as prevent_default, m as insert_dev, o as append_dev, V as set_input_value, u as mount_component, x as transition_in, y as transition_out, z as destroy_component, W as run_all } from './index.6595a006.js';
import { a as stores$1 } from './app.7dedac0a.js';
import { T as Toast } from './Toast.fef2d6d2.js';

/* src/routes/login.svelte generated by Svelte v3.16.7 */
const file = "src/routes/login.svelte";

function create_fragment(ctx) {
	let form;
	let label0;
	let t0;
	let t1;
	let input0;
	let t2;
	let label1;
	let t3;
	let t4;
	let input1;
	let t5;
	let button;
	let t6;
	let t7;
	let current;
	let dispose;
	const toast = new Toast({ $$inline: true });

	const block = {
		c: function create() {
			form = element("form");
			label0 = element("label");
			t0 = text("Username:");
			t1 = space();
			input0 = element("input");
			t2 = space();
			label1 = element("label");
			t3 = text("Password:");
			t4 = space();
			input1 = element("input");
			t5 = space();
			button = element("button");
			t6 = text("Login");
			t7 = space();
			create_component(toast.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", { action: true });
			var form_nodes = children(form);
			label0 = claim_element(form_nodes, "LABEL", { for: true });
			var label0_nodes = children(label0);
			t0 = claim_text(label0_nodes, "Username:");
			label0_nodes.forEach(detach_dev);
			t1 = claim_space(form_nodes);
			input0 = claim_element(form_nodes, "INPUT", { type: true, placeholder: true });
			t2 = claim_space(form_nodes);
			label1 = claim_element(form_nodes, "LABEL", { for: true });
			var label1_nodes = children(label1);
			t3 = claim_text(label1_nodes, "Password:");
			label1_nodes.forEach(detach_dev);
			t4 = claim_space(form_nodes);
			input1 = claim_element(form_nodes, "INPUT", { type: true });
			t5 = claim_space(form_nodes);
			button = claim_element(form_nodes, "BUTTON", {});
			var button_nodes = children(button);
			t6 = claim_text(button_nodes, "Login");
			button_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			claim_component(toast.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label0, "for", "username");
			add_location(label0, file, 46, 0, 910);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", /*username*/ ctx[0]);
			add_location(input0, file, 47, 0, 951);
			attr_dev(label1, "for", "password");
			add_location(label1, file, 48, 0, 1016);
			attr_dev(input1, "type", "password");
			add_location(input1, file, 49, 0, 1057);
			add_location(button, file, 50, 0, 1103);
			attr_dev(form, "action", "");
			add_location(form, file, 45, 0, 893);

			dispose = [
				listen_dev(input0, "input", /*input0_input_handler*/ ctx[6]),
				listen_dev(input1, "input", /*input1_input_handler*/ ctx[7]),
				listen_dev(button, "click", prevent_default(/*login*/ ctx[3]), false, true, false)
			];
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);
			append_dev(form, label0);
			append_dev(label0, t0);
			append_dev(form, t1);
			append_dev(form, input0);
			set_input_value(input0, /*username*/ ctx[0]);
			append_dev(form, t2);
			append_dev(form, label1);
			append_dev(label1, t3);
			append_dev(form, t4);
			append_dev(form, input1);
			set_input_value(input1, /*password*/ ctx[1]);
			append_dev(form, t5);
			append_dev(form, button);
			append_dev(button, t6);
			insert_dev(target, t7, anchor);
			mount_component(toast, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*username*/ 1) {
				attr_dev(input0, "placeholder", /*username*/ ctx[0]);
			}

			if (dirty & /*username*/ 1 && input0.value !== /*username*/ ctx[0]) {
				set_input_value(input0, /*username*/ ctx[0]);
			}

			if (dirty & /*password*/ 2 && input1.value !== /*password*/ ctx[1]) {
				set_input_value(input1, /*password*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(toast.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(toast.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			if (detaching) detach_dev(t7);
			destroy_component(toast, detaching);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $session;
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(4, $session = value));
	let msg = "test msg";
	let username = "";
	let password = "";

	async function login() {
		console.log(`Session before login: `);
		console.log($session);
		console.log(`Hi ${username}`);
		const user = { username, password };

		const settings = {
			method: "POST",
			body: JSON.stringify(user)
		};

		const res = await fetch(`http://localhost:8080/api/login`, settings);

		if (res.ok) {
			console.log("res.ok: ", res.statusText);
			window.pushToast(`${username} logged in successfully!`);
			session.set({ user: true });
		} else {
			console.log("res not okay: ", res.statusText);
			window.pushToast(res.statusText);
		}

		$$invalidate(0, username = $$invalidate(1, password = ""));
	}

	function input0_input_handler() {
		username = this.value;
		$$invalidate(0, username);
	}

	function input1_input_handler() {
		password = this.value;
		$$invalidate(1, password);
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("msg" in $$props) msg = $$props.msg;
		if ("username" in $$props) $$invalidate(0, username = $$props.username);
		if ("password" in $$props) $$invalidate(1, password = $$props.password);
		if ("$session" in $$props) session.set($session = $$props.$session);
	};

	return [
		username,
		password,
		session,
		login,
		$session,
		msg,
		input0_input_handler,
		input1_input_handler
	];
}

class Login extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Login",
			options,
			id: create_fragment.name
		});
	}
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uYzkxMGU5M2QuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvbG9naW4uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5pbXBvcnQgeyBzdG9yZXMgfSBmcm9tICdAc2FwcGVyL2FwcCc7XG5pbXBvcnQgVG9hc3QgZnJvbSAnLi4vY29tcG9uZW50cy9Ub2FzdC5zdmVsdGUnXG5jb25zdCB7IHNlc3Npb24gfSA9IHN0b3JlcygpO1xubGV0IG1zZyA9ICd0ZXN0IG1zZyc7XG5cblxubGV0IHVzZXJuYW1lID0gXCJcIlxubGV0IHBhc3N3b3JkID0gXCJcIlxuXG5hc3luYyBmdW5jdGlvbiBsb2dpbigpIHtcblx0Y29uc29sZS5sb2coYFNlc3Npb24gYmVmb3JlIGxvZ2luOiBgKTtcblx0Y29uc29sZS5sb2coJHNlc3Npb24pO1xuXHRcbiAgICBjb25zb2xlLmxvZyhgSGkgJHt1c2VybmFtZX1gKTtcblxuICAgIGNvbnN0IHVzZXIgPSB7XG5cdFx0dXNlcm5hbWUsXG5cdFx0cGFzc3dvcmQsXG5cdH1cblx0Y29uc3Qgc2V0dGluZ3MgPSB7XG5cdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkodXNlcilcblx0fVxuXHRjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS9sb2dpbmAsIHNldHRpbmdzKTtcblx0XG5cdGlmIChyZXMub2spIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Jlcy5vazogJywgcmVzLnN0YXR1c1RleHQpO1xuXHRcdHdpbmRvdy5wdXNoVG9hc3QoYCR7dXNlcm5hbWV9IGxvZ2dlZCBpbiBzdWNjZXNzZnVsbHkhYClcblx0XHRzZXNzaW9uLnNldCh7IHVzZXI6IHRydWUgfSlcblx0XHQvLyAkc2Vzc2lvbi51c2VyID0gdHJ1ZTtcblx0XHQvLyByZXR1cm4gdGhpcy5yZWRpcmVjdCgzMDIsICcvJylcblx0fSBlbHNlIHtcblx0XHRjb25zb2xlLmxvZygncmVzIG5vdCBva2F5OiAnLCByZXMuc3RhdHVzVGV4dCk7XG5cdFx0d2luZG93LnB1c2hUb2FzdChyZXMuc3RhdHVzVGV4dClcblx0fVxuXG4gICAgdXNlcm5hbWUgPSBwYXNzd29yZCA9IFwiXCJcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4vKiBmb3JtIHN0eWxpbmcgKi9cbjwvc3R5bGU+XG5cbjxmb3JtIGFjdGlvbj1cIlwiPlxuPGxhYmVsIGZvcj1cInVzZXJuYW1lXCI+VXNlcm5hbWU6IDwvbGFiZWw+XG48aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj17dXNlcm5hbWV9IGJpbmQ6dmFsdWU9e3VzZXJuYW1lfT5cbjxsYWJlbCBmb3I9XCJwYXNzd29yZFwiPlBhc3N3b3JkOiA8L2xhYmVsPlxuPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGJpbmQ6dmFsdWU9e3Bhc3N3b3JkfT5cbjxidXR0b24gb246Y2xpY2t8cHJldmVudERlZmF1bHQ9e2xvZ2lufT5Mb2dpbjwvYnV0dG9uPlxuPC9mb3JtPlxuXG48VG9hc3QgLz4iXSwibmFtZXMiOlsic3RvcmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBR1EsT0FBTyxLQUFLQSxRQUFNOzs7S0FDdEIsR0FBRyxHQUFHLFVBQVU7S0FHaEIsUUFBUSxHQUFHLEVBQUU7S0FDYixRQUFRLEdBQUcsRUFBRTs7Z0JBRUYsS0FBSztFQUNuQixPQUFPLENBQUMsR0FBRztFQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUTtFQUVqQixPQUFPLENBQUMsR0FBRyxPQUFPLFFBQVE7UUFFcEIsSUFBSSxLQUNaLFFBQVEsRUFDUixRQUFROztRQUVILFFBQVE7R0FDYixNQUFNLEVBQUUsTUFBTTtHQUNkLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUk7OztRQUVwQixHQUFHLFNBQVMsS0FBSyxvQ0FBb0MsUUFBUTs7TUFFL0QsR0FBRyxDQUFDLEVBQUU7R0FDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVTtHQUM1QyxNQUFNLENBQUMsU0FBUyxJQUFJLFFBQVE7R0FDNUIsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsSUFBSTs7R0FJeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsVUFBVTtHQUM1QyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVOzs7a0JBRzdCLFFBQVEsbUJBQUcsUUFBUSxHQUFHLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
